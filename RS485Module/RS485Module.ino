//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ВСЕ НАСТРОЙКИ - В CONFIG.h !!!!
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "CONFIG.h"
#include "RS485.h"
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RS485 rs485(RS485_SERIAL,RS485_DE_PIN,RS485_READING_TIMEOUT);
bool hasIncomingRS475Data = false; // флаг, что мы получили входящий запрос по RS-485
bool hasInterruptData = false; // флаг, что мы имеем данные по прерываниям, которые можно отправить мастеру по RS-485
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void ON_RS485_INCOMING_DATA() // событие - получены входящие данные по RS-475
{
    hasIncomingRS475Data = true; // взводим флаг
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void handleRS485Packet(const RS485Packet& packet, const uint8_t* data)
{
    //TODO: тут работаем с пакетом в зависимости от его типа!!!
    switch(packet.packetType)
    {
      case rs485Ping:
      {
        // запрос пинга, в data - 4 байта ID пакета пинга, отправляем их назад, плюс сообщаем, есть ли у нас данные по прерываниям
        uint32_t pingID;
        memcpy(&pingID,data,sizeof(pingID));

        DBG(F("PING packet received, ID="));
        DBGLN(pingID);

        RS485PongPacket answer;
        answer.pingID = pingID;
        answer.hasInterruptData = hasInterruptData;
        rs485.send(rs485Pong,(const uint8_t*)&answer,sizeof(answer));

        // данные отослали, в следующий раз мастер, если у нас есть данные по прерываниям - попросит нас отдать ему список прерываний
      }
      break; // rs485Ping
    } // switch 
  
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void setup() 
{
  #ifdef _DEBUG
    DEBUG_SERIAL.begin(SERIAL_SPEED);
  #endif

  // настраиваем RS-485
  RS485_SERIAL.begin(SERIAL_SPEED);
  rs485.begin();

  DBGLN(F("Ready."));
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void loop() 
{
  rs485.update(); // обновляем RS-485

  if(hasIncomingRS475Data)
  {
    hasIncomingRS475Data = false;
    
    // получили входящий пакет по RS-485
    uint8_t* data;
    RS485Packet packet = rs485.getDataReceived(data);

    DBG(F("Receive RS-485 packet, type="));
    DBG(packet.packetType);
    DBG(F("; data length="));
    DBGLN(packet.dataLength);

    handleRS485Packet(packet,data); // обрабатываем входящий пакет
    
  } // hasIncomingRS475Data
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void yield()
{
  
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
