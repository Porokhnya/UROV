#pragma once
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <Arduino.h>
#include "TinyVector.h"
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// НАСТРОЙКИ ПРОШИВКИ
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define SERIAL_SPEED                      57600        // скорость работы UART (должна быть одинакова в прошивках мастера и слейва!)
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// закомментировать для выключения отладочного режима (выводит в DEBUG_SERIAL отладочную информацию на скорости SERIAL_SPEED бод)
// ВНИМАНИЕ!!! ПРИ ВКЛЮЧЕННОМ ОТЛАДОЧНОМ РЕЖИМЕ, если для RS485 используется DEBUG_SERIAL - RS-485 РАБОТАТЬ НЕ БУДЕТ!!!
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define _DEBUG 
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// какой Serial использовать для отладки
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define DEBUG_SERIAL                      Serial

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройка тестовой индикации отсыла пакетов по RS-485
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define ENABLE_TEST_INDICATION // закомментировать для исключения тестовой индикации из прошивки
#define INDICATION_PIN  5 // номер пина для индикации, на котором висит светодиод индикации
#define INDICATION_ON_LEVEL LOW // уровень включения светодиода
#define INDICATION_DURATION 300 // какое время светодиод будет включённым после отсыла пакета


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки RS-485
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define RS485_DE_PIN                    29 // PB13          // номер пина управления режимом приёма/передачи MAX485
#define RS485_READING_TIMEOUT             200          // таймаут чтения из шины RS485, миллисекунд
#define RS485_SERIAL                      Serial2       // какой аппаратный UART использовать для RS-485
#define RS485_PING_PACKET_FREQUENCY       1000         // через сколько миллисекунд модуль посылает пакет проверки связи?
#define RETRANSMITS_COUNT                 10            // сколько раз пытаться переслать пакет, при отсутствии подтверждения штатного приёма пакета
#define ACK_PACKET_WAIT_TIME              500          // сколько ждать пакета подтверждения прежде, чем начать повторную передачу, миллисекунд

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки обработки прерываний
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define RELAY_PIN                        6// 24         // пин, на котором ловятся импульсы срабатывания защиты
#define RELAY_TRIGGER_LEVEL               LOW         // уровень, при котором срабатывает защита
#define INTERRUPT_BEGIN_DELAY             5000        // время ожидания (в микросекундах) между срабатыванием защиты до старта сбора информации с энкодера
#define INTERRUPT_MAX_IDLE_TIME           1200000ul   // время, в микросекундах, после получения последнего импульса с энкодера и до момента, когда будет принято решение, что импульсы на входе закончились
#define MAX_PULSES_TO_CATCH               200         // сколько максимум импульсов ловим с энкодера

#define PREDICT_ENABLED     // включено ли предсказание срабатывания защиты по импульсам?
#define PREDICT_PULSES  5 // какое кол-во импульсов регистрировать для предсказания, прежде чем делать вывод - было ли срабатывание защиты
#define PREDICT_TIME    100 // время, в микросекундах, между первым и последним импульсом для предсказаний. Если между крайними импульсами прошло меньше указанного времени - защита сработала


#define ENCODER_PIN1                     22 //PB6         // номер пина, на котором ловятся импульсы от энкодера штанги
#define ENCODER_INTERRUPT_LEVEL           RISING      // по какому уровню ловим прерывания энкодера

#define ENDSTOP_UP_PIN                    28//PA6           // Концевик позиции штанги, вверху
#define ENDSTOP_DOWN_PIN                  31//PA7           // Концевик позиции штанги, внизу
#define ENDSTOP_TRIGGER_LEVEL             HIGH        // уровень, на который проверяем в процессе опроса концевиков
#define ENDSTOP_FREQUENCY                 450         // рабочая частота импульсов концевика, Герц
#define ENDSTOP_HISTERESIS                30          // гистерезис частоты, Герц

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// дальше лазить - НЕОСМОТРИТЕЛЬНО !!!!
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// \/
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
typedef enum
{
  msIdle, // нормальный режим работы
  msWaitHandleInterrupts, // ждём до начала сбора прерываний
  msHandleInterrupts, // собираем прерывания
  msWaitGuardRelease, // ждём, пока концевик срабатывания защиты не переключится в разомкнутое состояние
  
} MachineState;
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
typedef Vector<uint32_t> DWordVector;
typedef Vector<uint8_t> ByteVector;
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _DEBUG
  #define DBG(s) { DEBUG_SERIAL.print((s)); }
  #define DBGLN(s) { DEBUG_SERIAL.println((s)); }
#else
  #define DBG(s) (void) 0
  #define DBGLN(s) (void) 0
#endif
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

